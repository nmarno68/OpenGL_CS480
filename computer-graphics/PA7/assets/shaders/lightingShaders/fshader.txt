#version 330

in vec3 Normal;
in vec3 FragPos;
smooth in vec2 texture;

out vec4 FragColor;

uniform sampler2D gSampler;
uniform vec3 viewPos;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);

    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(vec3(0.0, 0.0, 0.0) - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * vec3(1.0, 1.0, 1.0);

    // specular
    float specularStrength = 0.3;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * vec3(1.0, 1.0, 1.0);

    vec4 textcol = texture2D(gSampler, texture);
    vec3 objcol = vec3(textcol[0], textcol[1], textcol[2]);
    vec3 result = (ambient + diffuse + specular) * objcol;
    FragColor = vec4(result, 1.0);
}
